----- STANFORD SQL COURSE EXERCISES -----

---- 3. SQL Social-Network Query Exercises ----
/* 
We have 3 tables:
Highschooler (ID, name, grade)
Friend (ID1, ID2)
Likes (ID1, ID2)
*/

-- Q1: Find the names of all students who are friends with someone named Gabriel.

SELECT H1.name
FROM Highschooler H1
JOIN Friend F ON F.ID1 = H1.ID
JOIN Highschooler H2 ON H2.ID = F.ID2
WHERE H2.name = 'Gabriel'


-- Q2: For every student who likes someone 2 or more grades younger than
-- themselves, return that student's name and grade, and the name and grade of the 
-- student they like.

SELECT H1.name, H1.grade, H2.name, H2.grade
FROM Highschooler H1
JOIN Likes L ON L.ID1 = H1.ID
JOIN Highschooler H2 ON L.ID2 = H2.ID
WHERE H1.grade >= H2.grade + 2 


-- Q3: For every pair of students who both like each other, return the name and
-- grade of both students. Include each pair only once, with the two names in
-- alphabetical order.

SELECT H1.name, H1.grade, H2.name, H2.grade  
FROM Likes L1, Likes L2, Highschooler H1, Highschooler H2
WHERE L1.ID1 = L2.ID2 AND L2.ID1 = L1.ID2 AND L1.ID1 = H1.ID AND L1.ID2 = H2.ID AND H1.name < H2.name
ORDER BY H1.name, H2.name


-- Q4: Find all students who do not appear in the Likes table (as a student who 
-- likes or is liked) and return their names and grades. Sort by grade, then by 
-- name within each grade.

SELECT H.name, H.grade
FROM Highschooler H
WHERE ID NOT IN (SELECT ID1  
                FROM Likes
                UNION
                SELECT ID2
                FROM Likes)
ORDER BY H.grade, H.name


-- Q5: For every situation where student A likes student B, but we have no 
-- information about whom B likes (that is, B does not appear as an ID1 in the 
-- Likes table), return A and B's names and grades.

SELECT H1.name, H1.grade, H2.name, H2.grade
FROM Highschooler H1
JOIN Likes L ON H1.ID = L.ID1
JOIN Highschooler H2 ON H2.ID = L.ID2
WHERE H2.ID NOT IN (SELECT ID1 FROM Likes)


-- Q6: Find names and grades of students who only have friends in the same grade. 
-- Return the result sorted by grade, then by name within each grade.

- 1.Find all IDs that are note in same grade
/*
SELECT ID1
FROM Friend F, Highschooler H1, Highschooler H2
WHERE H1.ID = F.ID1 AND H2.ID = F.ID2 AND H1.grade != H2.grade
*/

- 2.Find IDs that are not in part 1
SELECT H.name, H.grade
FROM Highschooler H
WHERE ID NOT IN (SELECT ID1
                 FROM Friend F, Highschooler H1, Highschooler H2
                 WHERE H1.ID = F.ID1 AND H2.ID = F.ID2 AND H1.grade != H2.grade)
ORDER BY H.grade, H.name
                

-- Q7: For each student A who likes a student B where the two are not friends, 
-- find if they have a friend C in common (who can introduce them!). For all 
-- such trios, return the name and grade of A, B, and C.

/*
Basic idea of the query is this:
1.In SELECT, FROM clause: Stack 3 Highschooler table, 2 Friend table, 1 Likes table
2.In WHERE clause: H1 likes H2, H1 and H2 are not friends, H3 is friend with both H1 and H2
*/

SELECT H1.name, H1.grade, H2.name, H2.grade, H3.name, H3.grade
FROM Highschooler H1, Highschooler H2, Highschooler H3, Friend F1, Friend F2, Likes L
WHERE (H1.ID = L.ID1 AND H2.ID = L.ID2) 
AND H2.ID NOT IN (SELECT ID2
                  FROM Friend
                  WHERE ID1 = H1.ID)
AND (H1.ID = F1.ID1 AND H3.ID = F1.ID2) AND (H2.ID = F2.ID1 AND H3.ID = F2.ID2);


-- Q8: Find the difference between the number of students in the school and the 
-- number of different first names.

SELECT COUNT(H.ID) - COUNT(DISTINCT(H.name))
FROM Highschooler H


-- Q9: Find the name and grade of all students who are liked by more than one 
-- other student.

SELECT H.name, H.grade
FROM Highschooler H
JOIN Likes L ON L.ID2 = H.ID
GROUP BY L.ID2
HAVING COUNT(*) > 1

