----- STANFORD SQL COURSE EXERCISES -----

---- 2. SQL Movie-Rating Query Exercises Extras ----
/* 
We have 3 tables:
Movie ( mID, title, year, director )
Reviewer ( rID, name )
Rating ( rID, mID, stars, ratingDate )
*/

-- Q1: Find the names of all reviewers who rated Gone with the Wind.

SELECT DISTINCT(Re.name)
FROM reviewer Re
JOIN rating Ra ON Ra.rID = Re.rID
JOIN movie M ON M.mID = Ra.mID
WHERE m.title = 'Gone with the Wind'


-- Q2: For any rating where the reviewer is the same as the director 
-- of the movie, return the reviewer name, movie title, and number of stars.

SELECT Re.name, M.title, Ra.stars
FROM reviewer Re
JOIN rating Ra ON Ra.rID = Re.rID
JOIN movie M ON M.mID = Ra.mID
WHERE Re.name = M.director 


-- Q3: Return all reviewer names and movie names together in a single list, alphabetized. 

SELECT name
FROM Reviewer 
UNION
SELECT title
FROM Movie



-- Q4: Find the titles of all movies not reviewed by Chris Jackson.

SELECT DISTINCT(M.title)
FROM Movie M
WHERE mID NOT IN (
    SELECT mID
    FROM Rating Ra
    JOIN Reviewer Re USING(rID)
    WHERE Re.name = "Chris Jackson")


-- Q5: For all pairs of reviewers such that both reviewers gave a rating
-- to the same movie, return the names of both reviewers. Eliminate duplicates, 
-- don't pair reviewers with themselves, and include each pair only once. 
-- For each pair, return the names in the pair in alphabetical order.

SELECT DISTINCT Re1.name, Re2.name
FROM Rating R1, Rating R2, Reviewer Re1, Reviewer Re2
WHERE R1.mID = R2.mID
AND R1.rID = Re1.rID
AND R2.rID = Re2.rID
AND Re1.name < Re2.name
ORDER BY Re1.name, Re2.name


-- Q6: For each rating that is the lowest (fewest stars) currently in the 
-- database, return the reviewer name, movie title, and number of stars.

SELECT Re.name, M.title, Ra.stars
FROM movie M
JOIN Rating Ra USING(mID)
JOIN Reviewer Re USING(rID)
WHERE Ra.stars = (SELECT MIN(stars) FROM Rating)


-- Q7: List movie titles and average ratings, from highest-rated to lowest-rated. 
-- If two or more movies have the same average rating, list them in alphabetical order.

SELECT M.title, AVG(Ra.stars) as AvgStars
FROM Movie M
JOIN Rating Ra USING(mID)
GROUP BY M.mID
ORDER BY AvgStars DESC, M.title


-- Q8: Find the names of all reviewers who have contributed three or more ratings. 

SELECT Re.name
FROM Reviewer Re
JOIN Rating Ra USING(rId)
GROUP BY Re.rID
HAVING COUNT(Re.rID) >= 3


-- Q9: Some directors directed more than one movie. For all such directors, return 
-- the titles of all movies directed by them, along with the director name. 
-- Sort by director name, then movie title. 

SELECT M1.title, M1.director
FROM movie M1
WHERE (SELECT COUNT(DISTINCT(mID))
        FROM Movie M2 
        WHERE M1.director = M2.director) > 1
ORDER BY M1.director, M1.title


-- Q10: Find the movie(s) with the highest average rating. Return the movie title(s) 
-- and average rating. (Hint: This query is more difficult to write in SQLite than 
-- other systems; you might think of it as finding the highest average rating and 
-- then choosing the movie(s) with that average rating.)

SELECT M2.title, AVG(Ra2.stars)
FROM movie M2
JOIN Rating Ra2 USING(mID)
GROUP BY M2.mID
HAVING AVG(Ra2.stars) = (SELECT MAX(AvgStars) 
                        FROM (SELECT AVG(Ra1.stars) AS AvgStars
                                FROM Movie M1
                                JOIN Rating Ra1 USING(mID)
                                GROUP BY M1.mID
                             )
                        )

-- Q11: Find the movie(s) with the lowest average rating. Return the movie title(s) 
-- and average rating. 

SELECT M2.title, AVG(Ra2.stars)
FROM movie M2
JOIN Rating Ra2 USING(mID)
GROUP BY M2.mID
HAVING AVG(Ra2.stars) = (SELECT MIN(AvgStars) 
                        FROM (SELECT AVG(Ra1.stars) AS AvgStars
                                FROM Movie M1
                                JOIN Rating Ra1 USING(mID)
                                GROUP BY M1.mID
                             )
                        )


-- Q12: For each director, return the director's name together with the title(s)
-- of the movie(s) they directed that received the highest rating among all of
-- their movies, and the value of that rating. Ignore movies whose director is NULL.


SELECT M.director, M.title, MAX(Ra.stars)
FROM movie M
JOIN Rating Ra USING(mID)
GROUP BY M.director
HAVING M.director NOT NULL

-- Note: this question is not asking the average rating but it's asking the maximum rating